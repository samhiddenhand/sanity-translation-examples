import 'regenerator-runtime';
import * as React from 'react';
import { IType } from '../types/IType';
import { ILanguageObject } from '../types/ILanguageObject';
import { Path, Marker } from '@sanity/types';
interface IProps {
    type: IType;
    value: Record<string, any>;
    compareValue?: Record<string, unknown>;
    onChange?: (...args: any[]) => any;
    onFocus: (...args: any[]) => any;
    onBlur: (...args: any[]) => any;
    focusPath?: Path;
    markers?: Marker[];
    level?: number;
    readOnly?: boolean;
    isRoot?: boolean;
    filterField?: (...args: any[]) => any;
    presence: any[];
}
interface IState {
    currentLanguage: ILanguageObject | null;
    fetchingLanguages: boolean;
    languages: ILanguageObject[];
}
declare class Input extends React.PureComponent<IProps, IState> {
    static defaultProps: {
        onChange: () => void;
        level: number;
        focusPath: never[];
        isRoot: boolean;
        filterField: () => boolean;
    };
    private _firstField?;
    state: IState;
    private get missingTranslations();
    private getBaseLanguage;
    private setFirstField;
    private focus;
    private onSelectLanguage;
    private handleFieldChange;
    private renderField;
    private renderFieldset;
    private getRenderedFields;
    private getRenderedObjectInput;
    loadLanguages: () => Promise<void>;
    componentDidMount(): void;
    render(): JSX.Element;
}
export default Input;
